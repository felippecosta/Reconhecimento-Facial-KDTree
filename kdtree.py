# -*- coding: utf-8 -*-
"""KDTree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZwSNTuS7Q3AgVpM2WF9qtblJ4GYe12b
"""

!pip install deepface requests tqdm

from deepface import DeepFace
from PIL import Image
import os
import requests
from tqdm import tqdm

API_URL = "http://127.0.0.1:5000/faces"
API_BUSCA = "http://127.0.0.1:5000/faces/vizinhos"

def enviar_para_api(embedding, pessoa_id):
    payload = {
        "embedding": embedding,
        "pessoa_id": pessoa_id
    }
    try:
        r = requests.post(API_URL, json=payload)
        if r.status_code == 201:
            return True
        else:
            print(f"Erro ao inserir {pessoa_id}: {r.status_code}")
            return False
    except Exception as e:
        print(f"Erro de conexão: {e}")
        return False

from google.colab import drive
drive.mount('/content/drive')

IMAGES_PATH = "/content/drive/MyDrive/lfw-funneled"
MAX_FACES = 1000
FACES_INSERIDAS = 0

for pasta in tqdm(os.listdir(IMAGES_PATH)):
    pessoa_pasta = os.path.join(IMAGES_PATH, pasta)
    if not os.path.isdir(pessoa_pasta):
        continue

    for img_nome in os.listdir(pessoa_pasta):
        caminho = os.path.join(pessoa_pasta, img_nome)

        try:
            emb = DeepFace.represent(img_path=caminho, model_name='Facenet', enforce_detection=False)
            if emb and len(emb[0]['embedding']) == 128:
                sucesso = enviar_para_api(emb[0]['embedding'], f"{pasta}_{img_nome}")
                if sucesso:
                    FACES_INSERIDAS += 1
        except Exception as e:
            print(f"Erro em {caminho}: {e}")

        if FACES_INSERIDAS >= MAX_FACES:
            break
    if FACES_INSERIDAS >= MAX_FACES:
        break

print(f"{FACES_INSERIDAS} embeddings enviados para a API.")

MINHA_IMAGEM = "/content/drive/MyDrive/minhafoto.jpg"

emb = DeepFace.represent(img_path=MINHA_IMAGEM, model_name='Facenet')[0]
enviar_para_api(emb['embedding'], "eu")

resposta = requests.post(API_BUSCA, json={
    "embedding": emb['embedding'],
    "k": 3
})

print("Vizinhos mais próximos:")
print(resposta.json())